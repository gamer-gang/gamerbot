import { version } from 'discord.js'
import env from '../env.js'

export const userAgent = `gamerbot/${GAMERBOT_VERSION} ${env.WIKIPEDIA_CONTACT}) discord.js/${version}`

export interface WikipediaSearchResponse {
  pages: Page[]
}

export interface Page {
  /** Page identifier */
  id: number
  /** Page title in URL-friendly format */
  key: string
  /** Page title in reading-friendly format */
  title: string
  /**
   * For [search pages endpoint](https://www.mediawiki.org/wiki/API:REST_API/Reference#Search_pages):
   * A few lines giving a sample of page content with search terms highlighted
   * with `<span class=\"searchmatch\">` tags
   *
   * For [autocomplete page title endpoint](https://www.mediawiki.org/wiki/API:REST_API/Reference#Autocomplete_page_title):
   * Page title in reading-friendly format
   */
  excerpt: string
  /** The title of the page redirected from, if the search term originally matched a redirect page or null if search term did not match a redirect page */
  matched_title: string | null
  /** Short summary of the page topic based on the corresponding entry on Wikidata or null if no entry exists */
  description: string | null
  /** Information about the thumbnail image for the page or null if no thumbnail exists */
  thumbnail: Thumbnail | null
}

/** Information about the thumbnail image for the page */
export interface Thumbnail {
  /** Thumbnail [media type](https://en.wikipedia.org/wiki/Media_type) */
  mimetype: string
  /** File size in bytes or `null` if not available */
  size: number | null
  /** Maximum recommended image width in pixels or `null` if not available */
  width: number | null
  /** Maximum recommended image height in pixels or `null` if not available */
  height: number | null
  /** Length of the video, audio, or multimedia file or `null` for other media types */
  duration: number | null
  /** URL to download the file */
  url: string
}

/**
 * Query the Wikpedia REST API for search results.
 *
 * `'page'`: Searches wiki page titles and contents for the provided search
 * terms, and returns matching pages.
 *
 * `'title'`: Searches wiki page titles, and returns matches between the
 * beginning of a title and the provided search terms. You can use this endpoint
 * for a typeahead search that automatically suggests relevant pages by title.
 */
export const search = async (
  type: 'page' | 'title',
  query: string,
  limit = 50
): Promise<WikipediaSearchResponse> => {
  if (limit > 100 || limit < 1) throw new Error('limit must be between 1 and 100')
  const url = new URL(`https://en.wikipedia.org/w/rest.php/v1/search/${type}`)
  url.searchParams.set('q', query)
  url.searchParams.set('limit', limit.toString())
  const res = await fetch(url.toString(), { headers: { 'User-Agent': userAgent } })
  return res.json()
}

// Generated by https://quicktype.io

export interface WikipediaPage {
  id: number
  key: string
  title: string
  latest: Revision
  content_model: string
  license: License
}

export interface Revision {
  id: number
  timestamp: string
}

export interface License {
  url: string
  title: string
}

export const getPage = async (key: string): Promise<WikipediaPage & { html_url: string }> => {
  const url = new URL(`https://en.wikipedia.org/w/rest.php/v1/page/${key}/bare
  `)
  const res = await fetch(url.toString(), { headers: { 'User-Agent': userAgent } })
  return res.json()
}

export const getPageOffline = async (key: string): Promise<WikipediaPage & { html: string }> => {
  const url = new URL(`https://en.wikipedia.org/w/rest.php/v1/page/${key}/with_html
  `)
  const res = await fetch(url.toString(), { headers: { 'User-Agent': userAgent } })
  return res.json()
}

// Generated by https://quicktype.io

export interface SummaryResponse {
  batchcomplete: string
  query: {
    pages: {
      [id: string]: SummaryPage
    }
  }
}

export interface SummaryPage {
  pageid: number
  ns: number
  title: string
  extract: string
}

export const getSummary = async (key: string): Promise<string> => {
  const url = new URL(
    `https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro&explaintext&redirects=1&titles=${key}`
  )
  const res = await fetch(url.toString(), { headers: { 'User-Agent': userAgent } })
  const json: SummaryResponse = await res.json()
  const pages = Object.values(json.query.pages)
  if (pages.length === 0) throw new Error('No page found')
  return pages[0].extract
}
